{
  "name": "nostradamus",
  "version": "0.1.0",
  "description": "Holt-Winters triple exponential smoothing algorithm (for time series forecasting)",
  "main": "index.js",
  "devDependencies": {
    "benchmark": ">= 1.0.0"
  },
  "directories": {
    "lib": "./lib",
    "benchmark": "./bench",
    "test": "./test"
  },
  "scripts": {
    "test": "./test/test"
  },
  "keywords": [
    "holt-winters",
    "smoothing",
    "forecast",
    "exponential smoothing",
    "time series",
    "analysis"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/thick/Nostradamus.js.git"
  },
  "author": {
    "name": "thick"
  },
  "license": "MIT",
  "readme": "# Nostradamus.js\n\n---\n\n### -- is a [time-series](http://en.wikipedia.org/wiki/Time_series) [forecasting](http://en.wikipedia.org/wiki/Forecasting#Time_series_methods) tool for [Node.js](http://nodejs.org)\n\n### -- uses [triple exponential smoothing](http://www.itl.nist.gov/div898/handbook/pmc/section4/pmc435.htm) via the [Holt-Winters](http://www.it.iitb.ac.in/~praj/acads/seminar/04329008_ExponentialSmoothing.pdf) approach\n\n### -- works best with [seasonal](http://en.wikipedia.org/wiki/Seasonality) && [trending](http://en.wikipedia.org/wiki/Trend_analysis) data\n\n### -- can be [quite](http://bakacsin.ki.iif.hu/~kissg/project/nfsen-hw/JRA2-meeting-at-Espoo_slides.pdf) [useful](http://www.hindawi.com/journals/jcnc/2012/192913/) in a machine context\n\n\n---\n\n`$ npm install nostradamus`\n\n---\n\nOption 1:\n\n\t// plain-vanilla\n\tvar forecast = require('nostradamus')\n\t  , data = [\n\t  \t  362, 385, 432, 341, 382, 409,\n\t\t  498, 387, 473, 513, 582, 474,\n\t\t  544, 582, 681, 557, 628, 707,\n\t\t  773, 592, 627, 725, 854, 661\n\t    ]\n\t  , alpha = 0.5  // overall smoothing component\n\t  , beta = 0.4   // trend smoothing component\n\t  , gamma = 0.6  // seasonal smoothing component\n\t  , period = 4   // # of observations per season\n\t  , m = 4        // # of future observations to forecast\n\t  , predictions = [];\n\t\n\tpredictions = forecast(data, alpha, beta, gamma, period, m);\n\t// -> [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 594.8043646513713, 357.12171044215734, …]\n\t\n---\n\nOption 2:\n\n\t// faster w/ reuse of internal arrays\n\t// if you know you'll be feeding it\n\t// the same # of data, same params (alpha, beta, etc.),\n\t// and you need to throw tons of data at it\n\t\n\tvar setupForecast = require('nostradamus').memo  // note the (dot)memo\n\t  , forecast\n\t  , data = [\n\t  \t  362, 385, 432, 341, 382, 409,\n\t\t  498, 387, 473, 513, 582, 474,\n\t\t  544, 582, 681, 557, 628, 707,\n\t\t  773, 592, 627, 725, 854, 661\n\t    ]\n\t  , predictions = [];\n\t  \n\tforecast = setupForecast({\n\t  length: data.length,\n\t  alpha: 0.5,  // overall smoothing component\n\t  beta: 0.4,   // trend smoothing component\n\t  gamma: 0.6,  // seasonal smoothing component\n\t  period: 4,   // # of observations per season\n\t  m: 4         // # of future observations to forecase\n\t});\n\t\n\tpredictions = forecast(data);\n\t// -> [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 594.8043646513713, 357.12171044215734, …]\n\t\n\tforecast([…]);\n\tforecast([…]);\n\tforecast([…]);\n\t…\n\t\n---\n\nSome rules your parameters must abide by:\n  - `alpha >= 0.0 && alpha >= 1.0`\n  - `beta >= 0.0 && beta <= 1.0`\n  - `gamma >= 0.0 && gamma <= 1.0`\n  - `m > 0`\n  - `m <= period`\n  \n---\n\nThis project would't exist, if not for the versions written in [Go](https://github.com/datastream/holtwinters/) and [Java](https://github.com/nchandra/ExponentialSmoothing). Thanks!",
  "_id": "nostradamus@0.1.0",
  "dist": {
    "shasum": "993ec3a49bf82625bdd4da57990b7926c1913e38",
    "tarball": "http://registry.npmjs.org/nostradamus/-/nostradamus-0.1.0.tgz"
  },
  "maintainers": [
    {
      "name": "thick",
      "email": "dblknttd@gmail.com"
    }
  ],
  "_shasum": "993ec3a49bf82625bdd4da57990b7926c1913e38",
  "_resolved": "https://registry.npmjs.org/nostradamus/-/nostradamus-0.1.0.tgz",
  "_from": "nostradamus@*"
}
